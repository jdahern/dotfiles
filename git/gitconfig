[alias]

        alias = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /
        changes = log @{u}...HEAD --graph --decorate --left-right --boundary --pretty=format:'%Cred%h%Creset %d %s %Cgreen(%cr)%Creset %Cblue[%an]%Creset %n%b%n' --abbrev-commit --date=relative
        unstage = reset HEAD --
        reset-hard = reset --hard @{upstream}
        uncommit = reset HEAD^\n
        undo-push = push -f origin HEAD^:master
        track = "!sh -c \"\nif [ \\$# -eq 2 ]\n then\n   echo \\\"Setting tracking for branch \\\" \\$1 \\\" -> \\\" \\$2;\n   git branch --set-upstream \\$1 \\$2;\n else\n   git for-each-ref --format=\\\"local: %(refname:short) <--sync--> remote: %(upstream:short)\\\" refs/heads && echo --URLs && git remote -v;\nfi  \n\" -"
        
        # Branch
        br = branch
        branch-name = rev-parse --abbrev-ref HEAD
        branch-diff = diff master...HEAD
        branch-files = "!git diff master...HEAD --name-status | sed '/^D/d ; s/^.\\s\\+//'"

        # Commit
        commit-all = !git add -A && git commit              # Commit all changes
        amend = commit --amend
        amend-all = !git add --all && git commit --amend --reuse-message=HEAD

        # Checkout
        co = checkout
        cb = checkout -b

        # Cherry-pick
        cp = cherry-pick

        # Diff
        d = diff --color-words
        dc = diff --cached
        df = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

        # Status/Logging
        hist = log --graph --pretty=custom           # Show custom graph
        l = log --pretty=custom                      # Show custom log
        ll = log --stat --abbrev-commit
        lc = shortlog --summary --numbered           # List contributors

        # Reset
        unstage = reset HEAD --                      # Mixed reset (affects HEAD and Index)
        undo = reset --soft HEAD~1                   # Undo last commit (affects HEAD only)
        reset = reset --hard HEAD~1                  # Remove last commit (from HEAD, Index and Working Dir)

        # Git flow
        new = !git pull origin develop && git flow feature start
        done = !git pull origin develop && git flow feature finish "$(git symbolic-ref --short HEAD | sed -n 's/^feature\\///p')"
        go = !git checkout $1 && pull
        master = !git checkout master && pull
        develop = !git checkout develop && pull
        mmm = !git fetch origin master && git rebase origin/master
        ddd = !git fetch origin develop && git rebase origin/develop
  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  # Find commits by source code

  cc = "!f() { \
      git log --pretty=custom --decorate --date=short -S\"$1\"; \
  }; f"

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  # Find commits by commit message

  cm = "!f() { \
      git log --pretty=custom --decorate --date=short --grep=\"$1\"; \
  }; f"

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  # Credit an author on the latest commit

  credit = "!f() { \
      if [ -n \"$1\" ] && [ -n \"$2\" ]; then \
          git commit --amend --author \"$1 <$2>\" -C HEAD; \
      fi \
  }; f"

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  # List remote branches

  list-remote-branches = "!f() { \
      remote="${1:-origin}"; \
      git ls-remote --heads "$remote"; \
  }; f"

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  # Remove the tag with the specified tag name if
  # exists and tag the latest commit with that name

  retag = "!f() { \
      git tag -d "$1" &> /dev/null; \
      git tag $1; \
  }; f"

  # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

# So much color
[color]
        ui = always

[color "branch"]
        current = green bold
        local = green
        remote = yellow

[color "diff"]
        frag = magenta
        meta = yellow
        new = green
        old = red

[color "diff-highlight"]
        oldNormal = red bold
        oldHighlight = "red bold 52"
        newNormal = "green bold"
        newHighlight = "green bold 22"

[color "status"]
        added = green reverse
        changed = yellow reverse
        untracked = red reverse

# Git mergetool
[merge]
        tool = opendiff

[core]
        editor = emacs
        abbrev = 12
        attributesfile = ~/.gitattributes
        excludesfile = ~/.gitignore
        autocrlf = input
        mergeoptions = --no-edit
        ignorecase = false

[pager]
        # Insanely beautiful diffs ==> npm install -g diff-so-fancy
        diff = diff-so-fancy | less --tabs=4 -RFX
        show = diff-so-fancy | less --tabs=4 -RFX

[diff "bin"]
        # Use `hexdump` to diff binary files
        textconv = hexdump -v -C

[pretty]
        custom = "%C(magenta)%h%C(red)%d %C(yellow)%ar %C(green)%s %C(yellow)(%an)"
        #                     │        │            │            │             └─ author name
        #                     │        │            │            └─ message
        #                     │        │            └─ date (relative)
        #                     │        └─ decorations (branch, heads or tags)
        #                     └─ hash (abbreviated)

[help]
        # Correct typos
        autocorrect = 1

# Push easily http://stackoverflow.com/a/23918418/89484
[push]
        # Make `git push` automatically push relevant
        # annotated tags when pushing branches out
        followTags = true
        default = current

# Use separate file for username / github token / etc
[include]
        path = ~/.gitconfig.local
        
[fetch]
        prune = true
